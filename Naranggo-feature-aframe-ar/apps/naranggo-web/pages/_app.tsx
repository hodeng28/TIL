import { ReactElement, useEffect, useLayoutEffect, useState } from 'react';
import Head from 'next/head';
import { AppProps } from 'next/app';
// import { SessionProvider } from 'next-auth/react';
// import { Session } from 'next-auth';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { CacheProvider, EmotionCache } from '@emotion/react';
import theme from '../src/utils/theme';
import createEmotionCache from '../src/utils/createEmotionCache';
import { ReactQueryDevtools } from 'react-query/devtools';
import { QueryClient, QueryClientProvider, Hydrate } from 'react-query';
import '../styles/globals.css';
import dayjs from 'dayjs';
import duration from 'dayjs/plugin/duration';
import 'dayjs/locale/ko';
import SnackBarAlert from '@/components/common/SnackBarAlert';
import useBindReactNativeOnMessage from '@/hooks/useBindReactNativeOnMessage';
import { useAtom, useAtomValue, useSetAtom } from 'jotai';
import uuidAtom from '@/atoms/uuidAtom';
import fcmAtom from '@/atoms/fcmAtom';
import dynamic from 'next/dynamic';
import GlobalModal from '@/components/Modal/GlobalModal';
import useBackspace, { isNewlyWrittenStoryExist } from '@/hooks/useBackSpace';
import createdStoryIdblogAtom from '@/atoms/createdStoryIdblogAtom';
import { getCookie } from '@/utils/cookie';
import { loginRoutingAtom } from '@/atoms/webLoginAtom';
import router from 'next/router';
import versionAtom from '@/atoms/versionAtom';

// Client-side cache, shared for the whole session of the user in the browser.
const clientSideEmotionCache = createEmotionCache();
const queryClient = new QueryClient();
dayjs.locale('ko');
dayjs.extend(duration);

interface NarrangoAppProps extends AppProps<{ dehydratedState: unknown }> {
  emotionCache?: EmotionCache;
  Component: NextPageWithLayout;
  // session: Session;
}

const DynamicAppUpdate = dynamic(
  () => import('@/components/update/AppUpdate'),
  {
    ssr: false
  }
);

const DynamicTerms = dynamic(() => import('@/components/Terms/Terms'), {
  ssr: false
});

export default function NarrangoApp(props: NarrangoAppProps) {
  useBindReactNativeOnMessage();
  const { Component, emotionCache = clientSideEmotionCache, pageProps } = props;
  const version = useAtomValue(versionAtom);
  const [UUID, setUUID] = useAtom(uuidAtom);
  const [FCM, setFCM] = useAtom(fcmAtom);
  const [loginRouting, setLoginRouting] = useAtom(loginRoutingAtom);

  const [showTerms, setShowTerms] = useState(true);
  const createdStoryIdblog = useAtomValue(createdStoryIdblogAtom);

  useBindReactNativeOnMessage();

  useLayoutEffect(() => {
    if (
      !window.isWebViewAccess ||
      window.localStorage.getItem('isCheckTerms') === 'true'
    ) {
      setShowTerms(false);
      window.localStorage.setItem('isCheckTerms', 'true');
    }
  }, []);

  useBackspace();

  // preview와 development(local)에서 써야함.
  // TODO: 추후 웹에서 어떻게 동작할지 정해지면 preview는 제거 해야 함
  if (process.env.NEXT_PUBLIC_MODE === 'development') {
    if (typeof window !== 'undefined' && !window.ReactNativeWebView) {
      // setUUID('TESTUUID'); // test uuid for pc user
      // setFCM('TESTFCM'); // test fcm for pc user
      console.log(
        `::::: PC 사용자 ${process.env.NEXT_PUBLIC_MODE}환경 입니다. :::::`
      );
    } else {
      // 개발 모드여도 모바일에선 자신의 uuid를 통해 인증한다.
    }
  }

  useEffect(() => {
    if (
      !window.isWebViewAccess &&
      !getCookie('socialLoginInfo') &&
      isLoggedINPage()
    ) {
      setLoginRouting({
        ...loginRouting,
        routingPage: location.pathname
      });
      router.replace('/account/login');
    }
  }, [loginRouting, setLoginRouting]);

  const getLayout = Component.getLayout ?? ((page: ReactElement) => page);

  return (
    <QueryClientProvider client={queryClient}>
      <Hydrate state={pageProps.dehydratedState}>
        {/* <SessionProvider session={session}> */}
        <CacheProvider value={emotionCache}>
          <Head>
            <meta
              name="viewport"
              content="initial-scale=1, width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"
            />
            <title>나랑고 2.0</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <ThemeProvider theme={theme}>
            {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
            <CssBaseline />
            <GlobalModal />
            <SnackBarAlert />
            {version?.isNeeded ? (
              <DynamicAppUpdate />
            ) : showTerms ? (
              <DynamicTerms setShowTerms={setShowTerms} />
            ) : (
              <>
                {!isNewlyWrittenStoryExist(createdStoryIdblog) &&
                  getLayout(<Component {...pageProps} />)}
              </>
            )}
          </ThemeProvider>
          {/* <ReactQueryDevtools initialIsOpen={false} /> */}
        </CacheProvider>
        {/* </SessionProvider> */}
      </Hydrate>
    </QueryClientProvider>
  );
}

const isLoggedINPage = () => {
  const { pathname } = window.location;

  return (
    pathname.startsWith('/mypage') ||
    pathname.startsWith('/story/write') ||
    pathname.startsWith('/following') ||
    pathname.startsWith('/follower') ||
    pathname.startsWith('/profile/block')
  );
};
